<?php
/**
 * Created by BengBengFramework.
 * User: hahastein
 * Date: 2018-09-10
 * Time: 18:06
 */

namespace bengbeng\framework\widgets\menu;

use bengbeng\framework\models\platform\MenuARModel;
use Yii;
use yii\base\Widget;
use yii\db\ActiveQuery;

/**
 * Class StrongMenu
 * @package bengbeng\framework\widgets\menu
 */
class StrongMenu extends Widget
{

    const TYPE_DEFAULT = 0;
    const TYPE_LEFT = 10;
    const TYPE_TOP = 20;
    const TYPE_RIGHT = 30;
    const TYPE_CUSTOM = -1;

    public $type = self::TYPE_DEFAULT;
    public $layout;
    public $cache = true;

    private $menuData;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->menuData = false;
        self::initData();
    }

    private function initData(){

        $cache = Yii::$app->cache;

        //设置缓存
        if($this->cache){
            $this->menuData = $cache->get('system_menu_data');
        }else{
            if($cache->exists('system_menu_data')) {
                $cache->delete('system_menu_data');
            }
        }

        if ($this->menuData === false){
            $menuModel = new MenuARModel();
            $menuModel->showPage = false;
            $cache_data = $menuModel->dataSet(function (ActiveQuery $query){
                $query->select(['menu_id', 'menu_name', 'menu_icon', 'module', 'controller', 'action', 'parent_id', 'order', 'initials']);
                $query->where(['menu_type' => $this->type]);
                $query->orderBy([
                    'parent_id' => SORT_ASC,
                    'order' => SORT_ASC
                ]);
                $query->asArray();
            });

            self::resetMenuData($cache_data);

            if($this->cache) {
                $cache->set('system_menu_data', $this->menuData);
            }
        }
    }

    public function run()
    {
        $moduleID = '';
        $controllerID = Yii::$app->controller->id;
        $actionID = Yii::$app->controller->action->id;



        return $this->render(self::createLayoutPath(), [
            'menus' => $this->menuData,
            'controllerID' => $controllerID,
            'actionID' => $actionID,
            'moduleID' => $moduleID
        ]);
    }

    private function createLayoutPath(){
        if($this->type == self::TYPE_CUSTOM){
            return $this->layout;
        }else{
            return 'menu-'.self::changeType($this->type);
        }
    }

    /**
     * 重置菜单数据
     * @param $menuData
     */
    private function resetMenuData($menuData){
        $this->menuData = [];

        foreach ($menuData as $menu){
            if($menu['parent_id'] == 0){
                $this->menuData[$menu['menu_id']] = $menu;
            }else{
                $this->menuData[$menu['parent_id']]['parent'][] = $menu;
            }
        }
    }

    public static function changeType($type){
        switch ($type){
            case self::TYPE_LEFT:
                return 'left';
            case self::TYPE_RIGHT:
                return 'right';
            case self::TYPE_TOP:
                return 'top';
            default:
                return 'layout';
        }
    }
}